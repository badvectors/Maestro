@page "/"
@using static Maestro.Web.Airspace;

<PageTitle>MAESTRO</PageTitle>

<table class="table table-bordered">
    <tr>
        <th>Callsign</th>
        <th>Details</th>
        <th>Destination</th>
        <th>Feeder</th>
        <th>To Feeder</th>
        <th>To Runway</th>
        <th>Total</th>
        <th>ETA</th>
    </tr>

    @foreach (var aircraft in Functions.Aircraft.Where(x => x.Airport == "YMML").OrderBy(x => x.Airport).ThenBy(x => x.Runway))
    {
        var aircraftData = Functions.AircraftData.FirstOrDefault(x => x.Callsign == aircraft.Callsign);

        <tr>
            <td>@aircraft.Callsign</td>
            <td>@aircraft.Type / @aircraft.Wake / @aircraft.FlightRules</td>
            <td>@aircraft.Airport / @aircraft.Runway / @aircraft.STAR</td>
            <td>@aircraftData?.FeederFix</td>
            <td> @aircraftData?.DistanceToFeeder /
                @if (aircraftData?.HoursToFeeder != null)
                {
                    @Math.Round(TimeSpan.FromHours(aircraftData.HoursToFeeder.Value).TotalMinutes, 2)
                }
            </td>
            <td>
                @aircraftData?.DistanceFromFeeder /
                @if (aircraftData?.HoursFromFeeder != null)
                {
                    @Math.Round(TimeSpan.FromHours(aircraftData.HoursFromFeeder.Value).TotalMinutes, 2)
                }
            </td>
            <td>
                @if (aircraftData?.TotalDistance != null)
                {
                    @Math.Round(aircraftData.TotalDistance.Value, 2)
                } /
                @if (aircraftData?.TotalHours != null)
                {
                    @Math.Round(TimeSpan.FromHours(aircraftData.TotalHours.Value).TotalMinutes, 2)
                }
            </td>
            <td>
                @if (aircraftData?.ETA != null)
                {
                    @aircraftData.ETA.Value.ToString("HHmm")   
                }
            </td>
        </tr>
    }

</table>

@*@foreach (var airport in Airports)
{
    <div class="input-group">
        <span class="input-group-text"><i class="fa-solid fa-plane-arrival"></i></span>
        <div class="form-control">@airport.FullName</div>
        <button @onclick="() => Remove(airport.ICAOName)" class="btn btn-outline-secondary" type="button">
            <i class="fa-solid fa-xmark fa-fw"></i>
        </button>
    </div>

    <div class="row">
        @foreach (var runway in airport.Runways.OrderBy(x => x.Name))
        {
            var aircraft = Functions.Aircraft.Where(x => x.Airport == airport.ICAOName && x.Runway == runway.Name);

            @if (aircraft.Any(x => x.GroundSpeed > 30))
            {
                <div class="col-md">

                    <table class="table table-bordered mt-3">
                        <thead>
                            <tr class="bg-dark text-light"><th>@airport.ICAOName @runway.Name</th></tr>
                        </thead>
                        <tbody>
                            @foreach (var ac in aircraft)
                            {
                                <tr>
                                    <td>
                                        <b>@ac.Callsign</b>  <br />
                                        <small class="text-muted">
                                            @ac.Wake/@ac.FlightRules/@ac.STAR
                                        </small>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        }
    </div>
}

@if (!Airports.Any())
{
    <div class="input-group mt-3">
        <span class="input-group-text"><i class="fa-solid fa-plane-arrival"></i></span>
        <input @bind="ICAO" @oninput="(e)=> ICAO = e.Value.ToString()" @onkeydown="Enter" type="text" class="form-control" placeholder="ICAO code">
        <button @onclick="Add" class="btn btn-outline-secondary" type="button">
            <i class="fa-solid fa-check fa-fw"></i>
        </button>
    </div>
}*@

@code {
    private List<Airport> Airports { get; set; } = new List<Airport>();
    private string ICAO { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Functions.LoadData();

        Functions.AircraftUpdated += Update;
    }

    private void Update(object sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code != "Enter" && e.Code != "NumpadEnter") return;

        Add();
    }

    private void Add()
    {
        var airport = Airspace.GetAirport(ICAO.Trim().ToUpper());

        if (airport == null)
        {
            return;
        }

        if (!Airports.Any(x => x.ICAOName == airport.ICAOName))
        {
            Airports.Add(airport);
        }

        ICAO = string.Empty;
    }

    private void Remove(string icao)
    {
        var airport = Airports.FirstOrDefault(x => x.ICAOName == icao);

        if (airport == null) return;

        Airports.Remove(airport);
    }
}