@page "/"
@using Maestro.Common;
@using Maestro.Web.Models;
@using static Maestro.Web.Models.Airspace;

<PageTitle>MAESTRO</PageTitle>

@foreach (var airport in Airports)
{
    <div class="input-group mt-3">
        <span class="input-group-text"><i class="fa-solid fa-plane-arrival"></i></span>
        <div class="form-control">@airport.FullName</div>
        <button @onclick="() => Remove(airport.ICAOName)" class="btn btn-outline-secondary" type="button">
            <i class="fa-solid fa-xmark fa-fw"></i>
        </button>
    </div>

    <div class="row">
        @foreach (var runway in airport.Runways.OrderBy(x => x.Name))
        {
            var aircrafts = Functions.AircraftData.Where(x => x.SweatBox == SweatBox && x.ETA.HasValue && x.Airport == airport.ICAOName && x.Runway == runway.Name).OrderBy(x => x.Slot);

            if (aircrafts.Count() == 0) continue;

            <div class="col-sm">

                <h5 class="mt-3">Runway @runway.Name</h5>

                <table class="table table-bordered">
                    <tr>
                        <th style="width: 120px;">Callsign</th>
                        <th>Slot</th>
                        <th></th>
                    </tr>

                    @foreach (var aircraft in aircrafts)
                    {
                        <tr>
                            <td style="height:35px;">
                                @aircraft.Callsign
                            </td>
                            <td class="@SlotColour(aircraft)">
                                @if (aircraft.Slot != null)
                                {
                                   @aircraft.Slot.Value.ToString("HHmm")
                                }
                                @if (aircraft.Delta != null && aircraft.Delta != TimeSpan.Zero)
                                {
                                    if (aircraft.Delta < TimeSpan.Zero)
                                    {
                                        <i class="fa-solid fa-caret-up"></i>
                                    }
                                    if (aircraft.Delta > TimeSpan.Zero)
                                    {
                                        <i class="fa-solid fa-caret-down"></i>
                                    }
                                    @aircraft.DeltaDisplay()
                                }
                            </td>
                            <td style="width:15px;">
                                @if (aircraft.SlotLocked)
                                {
                                    <i @onclick="() => Functions.UnlockSlot(aircraft)" class="fa-solid fa-unlock"></i>
                                }
                            </td>
                        </tr>
                    }

                </table>
            </div>
        }
    </div>
}

@if (ShowAdd)
{
    <div class="input-group mt-3">
        <span class="input-group-text"><i class="fa-solid fa-plane-arrival"></i></span>
        <input @bind="ICAO" @oninput="(e)=> ICAO = e.Value.ToString()" @onkeydown="Enter" type="text" class="form-control" placeholder="ICAO code">
        <button @onclick="Add" class="btn btn-outline-secondary" type="button">
            <i class="fa-solid fa-check fa-fw"></i>
        </button>
    </div>
}
else
{
    <button @onclick="AddButton" class="btn btn-outline-secondary mt-3" type="button">
        <i class="fa-solid fa-plus"></i>
    </button>
}

<nav class="navbar fixed-bottom navbar-light bg-light">
    <div class="container-fluid">
        <div class="form-check form-switch">
            <input @bind="SweatBox" class="form-check-input" type="checkbox" id="sweatBoxSwitch">
            <label class="form-check-label" for="sweatBoxSwitch">Sweat Box</label>
        </div>
    </div>
</nav>

@code {
    private List<Airport> Airports { get; set; } = new List<Airport>();
    private string ICAO { get; set; }
    private bool SweatBox { get; set; }
    private bool ShowAdd { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await Functions.LoadData();

        Functions.AircraftUpdated += Update;
    }

    private void Update(object sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private string SlotColour(MaestroAircraft aircraft)
    {
        if (aircraft.SlotLocked) return "text-primary";
        return "text-dark";
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code != "Enter" && e.Code != "NumpadEnter") return;

        Add();
    }

    private void AddButton()
    {
        ICAO = string.Empty;
        ShowAdd = true;   
    }

    private void Add()
    {
        var airport = Airspace.GetAirport(ICAO.Trim().ToUpper());

        if (airport == null)
        {
            return;
        }

        if (!Airports.Any(x => x.ICAOName == airport.ICAOName))
        {
            Airports.Add(airport);
        }

        ICAO = string.Empty;

        ShowAdd = false;
    }

    private void Remove(string icao)
    {
        var airport = Airports.FirstOrDefault(x => x.ICAOName == icao);

        if (airport == null) return;

        Airports.Remove(airport);

        if (Airports.Count == 0) ShowAdd = true;
    }
}